set.seed(33833)
pred2<-predict(fit2,newdata=vowel.test)
set.seed(33833)
con1<-confusionMatrix(pred1,vowel.test$y) #.5952
set.seed(33833)
con2<-confusionMatrix(pred2,vowel.test$y) #.539
con1
con2
con3<-confusionMatrix(pred1,pred2)
con3
which(pred1==pred2)
con3<-confusionMatrix(which(pred1==pred2),vowel.test$y)
pred1==pred2
subset(pred1,pred1==pred2)
con3<-confusionMatrix((subset(pred1,pred1==pred2)),vowel.test$y)
pred3<-(subset(pred1,pred1==pred2))
pred3
dim(pred3)
length(pred3)
length(pred2)
length(pred1)
con3<-confusionMatrix(pred3,vowel.test$y)
?subset
pred3<-data.frame(subset(pred1,pred1==pred2))
View(pred3)
pred1<-data.frame(pred1)
pred2<-data.frame(pred2)
pred3<-data.frame(subset(pred1,pred1==pred2))
View(pred2)
pred3<-data.frame(subset(pred1,pred1[,1]==pred2[,1]))
pred3<-data.frame(subset(pred1,which(pred1[,1]==pred2[,1]))
)
pred3<-subset(pred1,pred1==pred2))
test2<-vowel.test$y[which(pred1==pred2),]
test2<-vowel.test[which(pred1==pred2),"y"]
test2
dim(test2)
length(test2)
length(pred3)
dim(pred3)
con3<-confusionMatrix(pred3,test2)
pred3<-as.list(pred3)
pred3
length(pred3)
set.seed(33833)
pred1<-predict(fit1,newdata=vowel.test)
set.seed(33833)
pred2<-predict(fit2,newdata=vowel.test)
pred3<-subset(pred1,pred1==pred2))
pred3<-subset(pred1,pred1==pred2)
test2<-vowel.test[which(pred1==pred2),"y"]
con3<-confusionMatrix(pred3,test2)
legnth(pred3)
length(pred3)
con3
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
set.seed(62433)
fit1<-train(diagnosis~.,data=training,method="rf",type="class")
set.seed(62433)
fit2<-train(diagnosis~.,data=training,method="gbm")
set.seed(62433)
fit3<-train(diagnosis~.,data=training,method="lda")
fit3
fit2
set.seed(62433)
pred1<-predict(fit1,newdata=testing)
set.seed(62433)
pred2<-predict(fit2,newdata=testing)
set.seed(62433)
pred3<-predict(fit3,newdata=testing)
predDF<-data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
View(testing)
combModFit <- train(diagnosis ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
combPred
confusionmatrix(combPred)
confusionmatrix(combPred,testing$diagnosis)
confusionMatrix(combPred,testing$diagnosis)
set.seed(62433)
predDF<-data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
set.seed(62433)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
set.seed(62433)
combPred <- predict(combModFit,predDF)
set.seed(62433)
confusionMatrix(combPred,testing$diagnosis)
confusionMatrix(pred1,testing$diagnosis)$Accuracy
confusionMatrix(pred1,testing$diagnosis)$accuracy
names(confusionMatrix(pred1,testing$diagnosis))
confusionMatrix(pred1,testing$diagnosis)$overall
confusionMatrix(pred2,testing$diagnosis)$overall
confusionMatrix(pred3,testing$diagnosis)$overall
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
names(concrete)
set.seed(233)
fit1<-train(CompressiveStrength~.,data=training,method="lasso")
fit1
?plot.enet
plot.enet(fit1)
plot(fit1)
plot(fit1,xvar="penalty")
plot.enet(fit1,xvar="penalty")
summary(fit1)
fit1
plot.enet(fit1,xvar="step")
plot(fit1,xvar="step")
par(mfrow=c(2,2))
plot(fit1,xvar="step")
plot(fit1,xvar="step")
plot(fit1,xvar="fraction")
plot(fit1,xvar="L1norm")
plot(fit1,xvar="penalty",use.color=TRUE)
plot(fit1,xvar="penalty",use.color="TRUE")
plot(fit1$finalModel,xvar="penalty",use.color="TRUE")
par(mfrow=c(1,1))
plot(fit1$finalModel,xvar="penalty",use.color="TRUE")
legend()
?legend
legend(1,1)
legend("bottom")
legend("bottom",legend)
legend("bottom",legend="legend")
plot(fit1$finalModel,xvar="penalty",use.color="TRUE")
fit1$finalModel
attributes(fit1$finalModel)
names(fit1)
fit1$times
fit1$xlevels
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
library(forecast)
install.packages("forecast")
install.packages("forecast")
library(forecast)
?bats
View(training)
plot(training)
forecast(training)
View(dat)
bats(tstrain)
plot(tstrain)
forecast(tstrain)
fit<-bats(tstrain)
forecast(fit)
fcast<-forecast(fit)
tstest = ts(testing$visitsTumblr)
?ts
accuracy(fcast,tstest)
plot(fcast)
accuracy(fcast,tstest)
tstest = ts(dat$visitsTumblr)
accuracy(fcast,tstest)
?accuracy
?meanf
?rwf
acc<-accuracy(fcast,tstest)
acc
names(acc)
?accuracy
?bats
fcast
tstest
names(acc)
names(accuracy())
names(accuracy(fcast,tstest))
acc
?acf
acf(fcast)
acf(fcast$residuals)
?acf
plot.forecast(fcast)
plot.forecast(fcast)
plot.forecast(accuracy(fcast,tstest))
plot.forecast((fcast,tstest))
plot.forecast(fcast,tstest)
plot.forecast(fcast-tstest)
predict(fcast,tstest)
plot(fcast)
plot.forecast(fcast)
library(lubridate)
library(forecast)
plot(fcast)
View(testing)
fcast
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("e1071")
?svm
library("e1071")
?svm
View(training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library("e1071")
set.seed(325)
fit<-svm(CompressiveStrength )
View(training)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
View(training)
set.seed(325)
fit<-svm(CompressiveStrength~.,data=training)
fit
pred1<-predict(fit,testing)
pred1
summary(pred1)
con1<-confusionMatrix(pred1,testing$CompressiveStrength)
View(testing)
?rmse
??rmse
postResample(pred1,testing)
postResample(pred1,testing$CompressiveStrength)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
fit<-bats(tstrain)
fcast<-forecast(fit)
fcast #tells you 95 and 85
library("forecast")
library("forecast", lib.loc="~/R/win-library/3.1")
fit<-bats(tstrain)
install.packages("forecast")
install.packages("forecast")
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
fit<-bats(tstrain)
fcast<-forecast(fit)
fcast #tells you 95 and 85
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
fit<-bats(tstrain)
fcast<-forecast(fit)
fcast #tells you 95 and 85
install.packages(timeDate)
install.packages("timeDate")
install.packages("timeDate")
library(forecast)
sessionInfo
sessionInfo()
install.packages(tseries)
install.packages("tseries")
install.packages("tseries")
library("stats", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("tools", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("utils", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("datasets", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("class", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("zoo", lib.loc="~/R/win-library/3.1")
library("timeDate", lib.loc="~/R/win-library/3.1")
library("rstudio", lib.loc="~/R/win-library/3.1")
library("rCharts", lib.loc="~/R/win-library/3.1")
library("randomForest", lib.loc="~/R/win-library/3.1")
library("latticeExtra", lib.loc="~/R/win-library/3.1")
library("lubridate", lib.loc="~/R/win-library/3.1")
library("gbm", lib.loc="~/R/win-library/3.1")
library("gdata", lib.loc="~/R/win-library/3.1")
library("ggplot2", lib.loc="~/R/win-library/3.1")
library("glmnet", lib.loc="~/R/win-library/3.1")
library("gplots", lib.loc="~/R/win-library/3.1")
library("caret", lib.loc="~/R/win-library/3.1")
library("devtools", lib.loc="~/R/win-library/3.1")
library("e1071", lib.loc="~/R/win-library/3.1")
library("elasticnet", lib.loc="~/R/win-library/3.1")
library("ElemStatLearn", lib.loc="~/R/win-library/3.1")
library("forecast", lib.loc="~/R/win-library/3.1")
detach("package:forecast", unload=TRUE)
library("forecast", lib.loc="~/R/win-library/3.1")
detach("package:forecast", unload=TRUE)
remove.packages("forecast", lib="~/R/win-library/3.1")
install.packages("forecast")
library("forecast", lib.loc="~/R/win-library/3.1")
formatDL
formatDL()
install.packages("forecast",dependencies = TRUE)
install.packages("forecast", dependencies = TRUE)
library("forecast", lib.loc="~/R/win-library/3.1")
install.packages("forecast", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library("forecast", lib.loc="~/R/win-library/3.1")
library("Rcpp", lib.loc="~/R/win-library/3.1")
library("forecast", lib.loc="~/R/win-library/3.1")
attach(forecast)
.libPaths()
install.packages(c("caret", "formatR", "labeling", "markdown", "swirl", "xlsxjars"))
library("forecast", lib.loc="~/R/win-library/3.1")
remove.packages("forecast", lib="~/R/win-library/3.1")
install.packages("forecast")
library("forecast", lib.loc="~/R/win-library/3.1")
detach("package:forecast", unload=TRUE)
library("forecast", lib.loc="~/R/win-library/3.1")
library("forecast", lib.loc="~/R/win-library/3.1")
install.packages("base")
install.packages("base")
install.packages("base")
library("base64enc", lib.loc="~/R/win-library/3.1")
library("caret", lib.loc="~/R/win-library/3.1")
library("forecast", lib.loc="~/R/win-library/3.1")
detach("package:timeDate", unload=TRUE)
library("timeDate", lib.loc="~/R/win-library/3.1")
library("tseries", lib.loc="~/R/win-library/3.1")
library("UsingR", lib.loc="~/R/win-library/3.1")
library("TTR", lib.loc="~/R/win-library/3.1")
library("zlibbioc", lib.loc="~/R/win-library/3.1")
library("yaml", lib.loc="~/R/win-library/3.1")
library("xtable", lib.loc="~/R/win-library/3.1")
library("XML", lib.loc="~/R/win-library/3.1")
library("xlsx", lib.loc="~/R/win-library/3.1")
library("xlsxjars", lib.loc="~/R/win-library/3.1")
library("tree", lib.loc="~/R/win-library/3.1")
library("whisker", lib.loc="~/R/win-library/3.1")
library("scrypt", lib.loc="~/R/win-library/3.1")
library("sp", lib.loc="~/R/win-library/3.1")
library("labeling", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
library("jsonlite", lib.loc="~/R/win-library/3.1")
library("jpeg", lib.loc="~/R/win-library/3.1")
library("iterators", lib.loc="~/R/win-library/3.1")
library("httr", lib.loc="~/R/win-library/3.1")
library("glmnet", lib.loc="~/R/win-library/3.1")
library("googleVis", lib.loc="~/R/win-library/3.1")
library("gplots", lib.loc="~/R/win-library/3.1")
library("gsubfn", lib.loc="~/R/win-library/3.1")
library("fpp", lib.loc="~/R/win-library/3.1")
library("fracdiff", lib.loc="~/R/win-library/3.1")
library("gbm", lib.loc="~/R/win-library/3.1")
detach("package:forecast", unload=TRUE)
library("forecast", lib.loc="~/R/win-library/3.1")
detach("package:forecast", unload=TRUE)
library("forecast", lib.loc="~/R/win-library/3.1")
formatDL(nm, txt, indent = max(nchar(nm, "w")) + 3)
library(caret)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
fit<-bats(tstrain)
fcast<-forecast(fit)
fcast #tells you 95 and 85
View(testing)
View(training)
library("forecast", lib.loc="~/R/win-library/3.1")
detach("package:forecast", unload=TRUE)
getwd()
install.packages("forecast")
2.
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit1<-train(diagnosis~.,data=training,method="rf",type="class")
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit1<-train(diagnosis~.,data=training,method="rf",type="class")
set.seed(62433)
fit2<-train(diagnosis~.,data=training,method="gbm")
set.seed(62433)
fit3<-train(diagnosis~.,data=training,method="lda")
set.seed(62433)
pred1<-predict(fit1,newdata=testing)
set.seed(62433)
pred2<-predict(fit2,newdata=testing)
set.seed(62433)
pred3<-predict(fit3,newdata=testing)
#Stacking
set.seed(62433)
predDF<-data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
set.seed(62433)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
set.seed(62433)
combPred <- predict(combModFit,predDF)
set.seed(62433)
confusionMatrix(combPred,testing$diagnosis) #.8171
confusionMatrix(pred1,testing$diagnosis)$overall #.768
confusionMatrix(pred2,testing$diagnosis)$overall #.805
confusionMatrix(pred3,testing$diagnosis)$overall #.768
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit1<-train(diagnosis~.,data=training,method="rf",type="class")
set.seed(62433)
fit2<-train(diagnosis~.,data=training,method="gbm")
set.seed(62433)
fit3<-train(diagnosis~.,data=training,method="lda")
set.seed(62433)
pred1<-predict(fit1,newdata=testing)
set.seed(62433)
pred2<-predict(fit2,newdata=testing)
set.seed(62433)
pred3<-predict(fit3,newdata=testing)
set.seed(62433)
predDF<-data.frame(pred1,pred2,pred3,diagnosis=training$diagnosis)
set.seed(62433)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
shiny::runApp('C:/Users/Michael/SkyDrive/Coursera/GitHub/HealthMap')
showLogs()
??showLogs()
devtools::install_github('rstudio/rscrypt')
getwd()
setwd("C:/Users/Michael/SkyDrive/Coursera/GitHub/HealthMap")
addAuthorizedUser("andy")
library("scrypt", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
library("shinysky", lib.loc="~/R/win-library/3.1")
addAuthorizedUser("andy")
shiny::runApp('C:/Users/Michael/SkyDrive/Coursera/R')
shiny::runApp('C:/Users/Michael/SkyDrive/Coursera/GitHub/HealthMap')
setwd("C:/Users/Michael/SkyDrive/Coursera/GitHub/HealthMap")
addAuthorizedUser("andy")
shiny::runApp('C:/Users/Michael/SkyDrive/Coursera/GitHub/HealthMap')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::deployApp()
shiny::deployApp("C:/Users/Michael/SkyDrive/Coursera/GitHub/HealthMap")
?deploy
??deploy
deployApp("C:/Users/Michael/SkyDrive/Coursera/GitHub/HealthMap")
setwd("C:/Users/Michael/SkyDrive/Coursera/GitHub/Health2")
shiny::runApp
deployApp("C:/Users/Michael/SkyDrive/Coursera/GitHub/Health2")
addAuthorizedUser("Sole")
deployApp("C:/Users/Michael/SkyDrive/Coursera/GitHub/Health2")
install.packages("forecast")
library("forecast", lib.loc="~/R/win-library/3.1")
