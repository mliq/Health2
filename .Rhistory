YTD2<-YTD[,c(7:10,12,14:16)]
View(YTD2)
YTD2<-YTD[,c(6:9,11,13:15)]
View(YTD2)
YTD2<-YTD[,c(6:11,13:15)]
View(YTD2)
colnames(YTD)<-as.character(c("test1,test2")
colnames(YTD2)<-as.character(c("test1,test2")
colnames(YTD2)<-as.character(c("test1,test2"))
View(YTD2)
View(YTD2)
View(YTD2)
colnames(YTD2)<-as.character(c("test1","test2"))
View(YTD2)
YTD2
View(YTD2)
YTD2<-YTD[,c(1,6:11,13:15)]
View(YTD2)
colnames(YTD2)<-as.character(c("Country/Region","Full Year OP","YTD OP","YTD Actuals","% to OP","Meets OI Requirements", "YTD Incremental $$ over OP", "% Local Growth OP", "% Local Growth Actual", "LCG % pts. over OP"))
View(YTD2)
YTD3<- subset(YTD2,"Full Year OP">=7)
View(YTD3)
class(YTD2$"Full Year OP")
YTD2$"Full Year OP"
class(YTD2$"Full Year OP")
YTD3<- subset(YTD2,as.numeric("Full Year OP">=7))
YTD3<- subset(YTD2,as.numeric("Full Year OP")>=7)
as.numeric("Full Year OP")
as.numeric(YTD2$"Full Year OP")
str(YTD2)
YTD2$"sort1" <- as.numeric(sub("\\$","", YTD2$"Full Year OP"))
YTD2$"sort1" <- as.numeric(sub("\\$","", YTD2$"Full Year OP"))
as.numeric(sub("\\$","", YTD2$"Full Year OP"))
View(YTD2)
YTD3<- subset(YTD2,"sort1">=7)
View(YTD3)
class(YTD2$sort1)
YTD3<- subset(YTD2,sort1>=7)
View(YTD3)
YTD4<-subset(YTD3,"Meets OI Requirements"=="YES")
View(YTD4)
YTD3$"Meets OI Requirements"
class(YTD3$"Meets OI Requirements")
View(YTD3)
YTD3$"Meets OI Requirements"=="YES"
YTD4<-subset(YTD3,"Meets OI Requirements"=="YES")
YTD4<-subset(YTD3,YTD3$"Meets OI Requirements"=="YES")
View(YTD4)
YTD5<-YTD5[order(sort1),]
YTD5<-YTD4[order(sort1),]
YTD5<-YTD4[order(YTD$sort1),]
YTD5<-YTD4[order(YTD4$sort1),]
View(YTD5)
YTD5<-YTD4[order(-YTD4$sort1),]
View(YTD5)
length(YTD5)
dim(YTD5)
dim(YTD5)[1]
c(1:dim(YTD5)[1])
rownames(YTD5)<-c(1:dim(YTD5)[1])
YTD6<-cbind("Rank"=rownames(YTD5),YTD5)
View(YTD6)
YTD7<-YTD6[,c(1:6,8)]
View(YTD7)
YTD5<-YTD4[,c(1:6,8)]
View(YTD5)
YTD5<-YTD4[,c(1:5,7)]
View(YTD5)
colnames(YTD5)
YTD5$"sort1" <- as.numeric(sub("\\$","", YTD5$"YTD Incremental $$ over OP"))
YTD5$"sort2" <- as.numeric(sub("\\$","", YTD5$"YTD Incremental $$ over OP"))
YTD5<-YTD4[,c(1:5,7)]
YTD5$"sort2" <- as.numeric(sub("\\$","", YTD5$"YTD Incremental $$ over OP"))
YTD6<-YTD5[order(-YTD5$sort2),]
View(YTD6)
rownames(YTD6)<-c(1:dim(YTD6)[1])
YTD7<-cbind("Rank"=rownames(YTD6),YTD6)
View(YTD7)
YTD7<-cbind("Rank"=rownames(YTD6),YTD6[,1:6])
View(YTD7)
View(YTD4)
HTD1<-YTD4[,c(8:10)]
View(HTD1)
colnames(HTD1)
HTD2$"sort3" <- as.numeric(sub("\\%","", HTD1$"LCG % pts. over OP"))
HTD1$"sort3" <- as.numeric(sub("\\%","", HTD1$"LCG % pts. over OP"))
HTD2<-HTD1[order(-HTD1$sort3),]
View(HTD2)
rownames(HTD2)<-c(1:dim(HTD2)[1])
HTD3<-cbind("Rank"=rownames(HTD2),HTD2[,1:3])
View(HTD3)
shiny::runApp()
shiny::runApp()
View(YTD7)
shiny::runApp()
colnames(HTD3)
shiny::runApp()
data<-cbind(HTD3," LCG % pts. over OP"=as.numeric(gsub('\\%', '', HTD3$"LCG % pts. over OP")))
View(data)
shiny::runApp()
dim(HTD3)
dim(YTD7)
shiny::runApp()
data<-cbind(HTD3," LCG % pts. over OP"=as.numeric(sub('\\%', '', HTD3$"LCG % pts. over OP")))
View(data)
shiny::runApp()
shiny::runApp()
HTD1<-YTD4[,c(8:10)]
#Make numeric sort column, sort, erase sort column
HTD1$"sort3" <- as.numeric(sub("\\%","", HTD1$"LCG % pts. over OP"))
HTD2<-HTD1[order(-HTD1$sort3),]
rownames(HTD2)<-c(1:dim(HTD2)[1])
HTD3<-cbind("Rank"=rownames(HTD2),HTD2[,1:3])
#HTD Table ready.
shiny::runApp()
View(YTD7)
View(data)
data<-cbind(YTD7,"$$overOP"=as.numeric(sub("\\$", "", YTD7$"YTD Incremental $$ over OP")))
data<-cbind(HTD3,"LCG%"=as.numeric(sub('\\%', '', HTD3$"LCG % pts. over OP")))
str(data)
shiny::runApp()
data<-cbind(HTD3,"LCG%"=as.factors(sub('\\%', '', HTD3$"LCG % pts. over OP")))
data<-cbind(HTD3,"LCG%"=as.factor(sub('\\%', '', HTD3$"LCG % pts. over OP")))
shiny::runApp()
data<-cbind(YTD7,"$$overOP"=as.numeric(sub("\\$", "", YTD7$"YTD Incremental $$ over OP")))
View(data)
data<-cbind(HTD3,"LCG%"=as.numeric(sub('\\%', '', HTD3$"LCG % pts. over OP")))
data$LCG%
data$"LCG%"
shiny::runApp()
var=data$"$$overOP"
shiny::runApp()
data<-cbind(HTD3,"LCG"=as.numeric(sub('\\%', '', HTD3$"LCG % pts. over OP")))
View(data)
shiny::runApp()
data<-HTD3
View(data)
data<-cbind(HTD3,"LCG"=as.numeric(sub('\\%', '', HTD3$"LCG % pts. over OP")))
View(data)
###Pre-Processing
YTD <- read.csv("1B.csv",stringsAsFactors=FALSE)
YTD <-YTD[-1:-4,]
YTD2<-YTD[,c(1,6:11,13:15)]
#Columns selected,
#Row and column names
colnames(YTD2)<-as.character(c("Country/Region","Full Year OP","YTD OP","YTD Actuals","% to OP","Meets OI Requirements", "YTD Incremental $$ over OP", "% Local Growth OP", "% Local Growth Actual", "LCG % pts. over OP"))
#Filter
YTD2$"sort1" <- as.numeric(sub("\\$","", YTD2$"Full Year OP"))
YTD3<- subset(YTD2,sort1>=7)
YTD4<-subset(YTD3,YTD3$"Meets OI Requirements"=="YES")
#Cut to YTD columns
YTD5<-YTD4[,c(1:5,7)]
#Make numeric sort column, sort, erase sort column
YTD5$"sort2" <- as.numeric(sub("\\$","", YTD5$"YTD Incremental $$ over OP"))
YTD6<-YTD5[order(-YTD5$sort2),]
rownames(YTD6)<-c(1:dim(YTD6)[1])
YTD7<-cbind("Rank"=rownames(YTD6),YTD6[,1:6])
#YTD Table ready.
##HTD , starting from YTD4
#Cut to HTD columns
HTD1<-YTD4[,c(8:10)]
#Make numeric sort column, sort, erase sort column
HTD1$"sort3" <- as.numeric(sub("\\%","", HTD1$"LCG % pts. over OP"))
HTD2<-HTD1[order(-HTD1$sort3),]
rownames(HTD2)<-c(1:dim(HTD2)[1])
HTD3<-cbind("Rank"=rownames(HTD2),HTD2[,1:3])
#HTD Table ready.
View(HTD3)
data<-cbind(HTD3,"LCG"=as.numeric(sub('\\%', '', HTD3$"LCG % pts. over OP")))
color="{values:[-50,0,10,30],colors:['#FF0000', '#FFC0CB', '#FFA500','#008000']}"
var="LCG % pts. over OP"
gvisGeoChart(data, locationvar="Country/Region", colorvar=var, options=list(
colorAxis=color,height=400,width=600,keepAspectRatio='false'))
data<-cbind(YTD7,"$$overOP"=as.numeric(sub("\\$", "", YTD7$"YTD Incremental $$ over OP")))
gvisGeoChart(data, locationvar="Country/Region", colorvar=var, options=list(
colorAxis=color,height=400,width=600,keepAspectRatio='false'))
?gvisGeoChart
library(googleVis)
library(shiny)
gvisGeoChart(data, locationvar="Country/Region", colorvar=var, options=list(
colorAxis=color,height=400,width=600,keepAspectRatio='false'))
HTD1<-YTD4[,c(1,8:10)]
#Make numeric sort column, sort, erase sort column
HTD1$"sort3" <- as.numeric(sub("\\%","", HTD1$"LCG % pts. over OP"))
HTD2<-HTD1[order(-HTD1$sort3),]
rownames(HTD2)<-c(1:dim(HTD2)[1])
HTD3<-cbind("Rank"=rownames(HTD2),HTD2[,1:3])
View(HTD3)
shiny::runApp()
data<-cbind(HTD3,"LCG"=as.numeric(sub('\\%', '', HTD3$"LCG % pts. over OP")))
View(HTD3)
View(HTD2)
HTD3<-cbind("Rank"=rownames(HTD2),HTD2[,1:4])
data<-cbind(HTD3,"LCG"=as.numeric(sub('\\%', '', HTD3$"LCG % pts. over OP")))
gvisGeoChart(data, locationvar="Country/Region", colorvar=var, options=list(
colorAxis=color,height=400,width=600,keepAspectRatio='false'))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
min(HTD3$"LCG Perc. over OP")
min(c(1,5))
data<-cbind(HTD3,"LCG Perc. over OP"=as.numeric(sub('\\%', '', HTD3$"LCG % pts. over OP")))
min(data$"LCG Perc. over OP")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(YTD7)
gsub("UK Ireland", "GB", YTD7)
View(YTD7)
YTD8<-gsub("UK Ireland", "GB", YTD7)
YTD8<-data.frame(gsub("UK Ireland", "GB", YTD7))
View(YTD8)
YTD8<-YTD7
YTD8[,1]<-gsub("UK Ireland", "GB", YTD7[,1])
View(YTD8)
YTD8[,2]<-gsub("UK Ireland", "GB", YTD7[,2])
View(YTD8)
?which()
?which(YTD8[2]=="GB")
which(YTD8[2]=="GB")
which(YTD8[2]=="Gulf")
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="GB"),])
View(YTD8)
dim(YTD8)
YTD8[dim(YTD8[1]),2]<-"IE"
View(YTD8)
YTD8[dim(YTD8[1]),2]
YTD8[dim(YTD8[1]),2]
YTD8[dim(YTD8[1])]
YTD8[dim(YTD8[1]),]
dim(YTD8[1])
dim(YTD8)[1]
YTD8<-YTD7
YTD8[,2]<-gsub("UK Ireland", "GB", YTD7[,2])
#Ireland
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="GB"),])
YTD8[dim(YTD8)[1],2]<-"IE"
View(YTD8)
shiny::runApp()
YTD8<-YTD7
YTD8[,2]<-gsub("UK Ireland", "UK", YTD7[,2])
#Ireland
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="UK"),])
YTD8[dim(YTD8)[1],2]<-"Ireland"
shiny::runApp()
View(YTD8)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
YTD8<-YTD7
YTD8[,2]<-gsub("UK Ireland", "Great Britain", YTD8[,2])
View(YTD8)
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Great Britain"),])
YTD8[dim(YTD8)[1],2]<-"Ireland"
shiny::runApp()
which(YTD8[2]=="Great Britain"
)
which(YTD8[2]=="Great ")
YTD8[,2]<-gsub("NORDIC", "hot pocket", YTD8[,2])
View(YTD8)
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="hot pocket"),])
View(YTD8)
(which(YTD8[2]=="hot pocket")!=0
)
(which(YTD8[2]=="Ireland")!=0
)
YTD8<-YTD7
If (which(YTD8[2]=="UK Ireland")!=0) {
YTD8[,2]<-gsub("UK Ireland", "Great Britain", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Great Britain"),])
YTD8[dim(YTD8)[1],2]<-"Ireland"
}
if (which(YTD8[2]=="UK Ireland")!=0) {
YTD8[,2]<-gsub("UK Ireland", "Great Britain", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Great Britain"),])
YTD8[dim(YTD8)[1],2]<-"Ireland"
}
which(YTD8[2]=="UK Ireland")!=0
YTD8<-YTD7
if (which(YTD8[2]=="UK Ireland")!=0) {
YTD8[,2]<-gsub("UK Ireland", "Great Britain", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Great Britain"),])
YTD8[dim(YTD8)[1],2]<-"Ireland"
}
View(YTD8)
View(YTD8)
if (which(YTD8[2]=="UK Ireland")!=0) {
YTD8[,2]<-gsub("UK Ireland", "Great Britain", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Great Britain"),])
YTD8[dim(YTD8)[1],2]<-"Ireland"
}
if (which(YTD8[2]=="UK Ireland")!=0) {
YTD8[,2]<-gsub("UK Ireland", "Great Britain", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Great Britain"),])
YTD8[dim(YTD8)[1],2]<-"Ireland"
}
else {}
?else
?if
()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
if (!is.null(which(YTD8[2]=="Alpine"))) {
YTD8[,2]<-gsub("Alpine", "Switzerland", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Switzerland"),])
YTD8[dim(YTD8)[1],2]<-"Liechtenstein"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Switzerland"),])
YTD8[dim(YTD8)[1],2]<-"Austria"
}
View(YTD8)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::deployApp()
library("shinyapps", lib.loc="~/R/win-library/3.1")
shiny::deployApp()
shinyapps::deployApp()
shinyapps::deployApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
YTD <- read.csv("1B.csv",stringsAsFactors=FALSE)
YTD <-YTD[-1:-4,]
YTD2<-YTD[,c(1,6:11,13:15)]
#Columns selected,
#Row and column names
colnames(YTD2)<-as.character(c("Country/Region","Full Year OP","YTD OP","YTD Actuals","% to OP","Meets OI Requirements", "YTD Incremental $$ over OP", "% Local Growth OP", "% Local Growth Actual", "LCG % pts. over OP"))
#Filter
YTD2$"sort1" <- as.numeric(sub("\\$","", YTD2$"Full Year OP"))
YTD3<- subset(YTD2,sort1>=7)
YTD4<-subset(YTD3,YTD3$"Meets OI Requirements"=="YES")
#Cut to YTD columns
YTD5<-YTD4[,c(1:5,7)]
#Make numeric sort column, sort, erase sort column
YTD5$"sort2" <- as.numeric(sub("\\$","", YTD5$"YTD Incremental $$ over OP"))
YTD6<-YTD5[order(-YTD5$sort2),]
rownames(YTD6)<-c(1:dim(YTD6)[1])
YTD7<-cbind("Rank"=rownames(YTD6),YTD6[,1:6])
#YTD Table ready.
##HTD , starting from YTD4
#Cut to HTD columns
HTD1<-YTD4[,c(1,8:10)]
#Make numeric sort column, sort, erase sort column
HTD1$"sort3" <- as.numeric(sub("\\%","", HTD1$"LCG % pts. over OP"))
HTD2<-HTD1[order(-HTD1$sort3),]
rownames(HTD2)<-c(1:dim(HTD2)[1])
HTD3<-cbind("Rank"=rownames(HTD2),HTD2[,1:4])
#HTD Table ready.
###Fix non-displayed countries
YTD9<-YTD7
HTD4<-HTD3
regions <- function(YTD8) {
#UK Ireland
if (!is.null(which(YTD8[2]=="UK Ireland"))) {
YTD8[,2]<-gsub("UK Ireland", "Great Britain", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Great Britain"),])
YTD8[dim(YTD8)[1],2]<-"Ireland"
}
#Alpine = Swiss, Liechtenstein, Austria.
if (!is.null(which(YTD8[2]=="Alpine"))) {
YTD8[,2]<-gsub("Alpine", "Switzerland", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Switzerland"),])
YTD8[dim(YTD8)[1],2]<-"Liechtenstein"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Switzerland"),])
YTD8[dim(YTD8)[1],2]<-"Austria"
}
#Benelux = Belgium, Luxembourg, Netherlands
if (!is.null(which(YTD8[2]=="Benelux"))) {
YTD8[,2]<-gsub("Benelux", "Netherlands", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Netherlands"),])
YTD8[dim(YTD8)[1],2]<-"Luxembourg"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Netherlands"),])
YTD8[dim(YTD8)[1],2]<-"Belgium"
}
#Gulf = Kuwait, Bahrain, Oman, Qatar, UAE
if (!is.null(which(YTD8[2]=="Gulf"))) {
YTD8[,2]<-gsub("Gulf", "United Arab Emirates", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="United Arab Emirates"),])
YTD8[dim(YTD8)[1],2]<-"Oman"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="United Arab Emirates"),])
YTD8[dim(YTD8)[1],2]<-"Qatar"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="United Arab Emirates"),])
YTD8[dim(YTD8)[1],2]<-"Bahrain"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="United Arab Emirates"),])
YTD8[dim(YTD8)[1],2]<-"Kuwait"
}
#Iberia = Port, spain
if (!is.null(which(YTD8[2]=="Iberia"))) {
YTD8[,2]<-gsub("Iberia", "Spain", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Spain"),])
YTD8[dim(YTD8)[1],2]<-"Portugal"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Spain"),])
YTD8[dim(YTD8)[1],2]<-"Andorra"
}
#Central America & Caribbean Region = DR, Panama, Guatemala, CR, Honduras, Nicaragua, El Salvador
if (!is.null(which(YTD8[2]=="Central America & Caribbean Region"))) {
YTD8[,2]<-gsub("Central America & Caribbean Region", "Dominican Republic", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Panama"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Guatemala"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Costa Rica"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Honduras"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Nicaragua"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"El Salvador"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Jamaica"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Trinidad and Tobago"
}
#Andean Region = Ecuador, Peru, Bolivia, Paraguay
if (!is.null(which(YTD8[2]=="Andean Region"))) {
YTD8[,2]<-gsub("Andean Region", "Ecuador", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Ecuador"),])
YTD8[dim(YTD8)[1],2]<-"Peru"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Ecuador"),])
YTD8[dim(YTD8)[1],2]<-"Bolivia"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Ecuador"),])
YTD8[dim(YTD8)[1],2]<-"Paraguay"
}
#ANZ = NA for now
#Nordic = NA for now
#Argentina Uruguay
#Cesko
#Singapore Region
return(YTD8)
}
YTD9<-regions(YTD9)
HTD4<-regions(HTD4)
View(YTD7)
data<-YTD7
data=as.numeric(sub('\\%', '', data)
View(data)
data<-YTD7
data=as.numeric(gsub('\\%', '', data))
data<-YTD7
data=as.numeric(sub('\\%', '', data))
?grep
?apply
?grepl
data<-YTD7
apply(data, c(1,2), function(x) gsub('\\%', '', x))
data<-YTD7
data=apply(data, c(1,2), function(x) gsub('\\%', '', x))
data=apply(data, c(1,2), function(x) gsub('\\$', '', x))
View(data)
View(YTD)
View(YTD3)
shiny::runApp()
View(data)
class(data)
data=data.frame(data)
View(data)
View(YTD9)
shiny::runApp()
YTD <- read.csv("1B.csv",stringsAsFactors=FALSE)
YTD <-YTD[-1:-4,]
YTD2<-YTD[,c(1,6:11,13:15)]
YTD2=apply(YTD2, c(1,2), function(x) gsub('\\%', '', x))
YTD2=apply(YTD2, c(1,2), function(x) gsub('\\$', '', x))
YTD2=data.frame(YTD2)
View(YTD2)
YTD <- read.csv("1B.csv",stringsAsFactors=FALSE)
YTD <-YTD[-1:-4,]
YTD2<-YTD[,c(1,6:11,13:15)]
YTD2=as.numeric(apply(YTD2, c(1,2), function(x) gsub('\\%', '', x)))
YTD2=as.numeric(apply(YTD2, c(1,2), function(x) gsub('\\$', '', x)) )
YTD <- read.csv("1B.csv",stringsAsFactors=FALSE)
YTD <-YTD[-1:-4,]
YTD2<-YTD[,c(1,6:11,13:15)]
YTD2=apply(YTD2, c(1,2), function(x) gsub('\\%', '', x))
YTD2=apply(YTD2, c(1,2), function(x) gsub('\\$', '', x))
YTD2=data.frame(YTD2)
View(YTD2)
YTD2[,2:] <- sapply(cars[,2:], as.numeric)
YTD2[,2:9] <- sapply(cars[,2:9], as.numeric)
YTD2[,2:9] <- sapply(YTD2[,2:9], as.numeric)
View(YTD2)
YTD <- read.csv("1B.csv",stringsAsFactors=FALSE)
YTD <-YTD[-1:-4,]
YTD2<-YTD[,c(1,6:11,13:15)]
YTD2=apply(YTD2, c(1,2), function(x) gsub('\\%', '', x))
YTD2=apply(YTD2, c(1,2), function(x) gsub('\\$', '', x))
YTD2=data.frame(YTD2)
YTD2[,2:9] <- sapply(YTD2[,2:9], as.numeric)
View(YTD2)
View(YTD)
YTD <- read.csv("1B.csv",stringsAsFactors=FALSE)
YTD <-YTD[-1:-4,]
YTD2<-YTD[,c(1,6:11,13:15)]
YTD2=apply(YTD2, c(1,2), function(x) gsub('\\%', '', x))
YTD2=apply(YTD2, c(1,2), function(x) gsub('\\$', '', x))
YTD2=data.frame(YTD2)
View(YTD2)
str(YTD2)
shiny::runApp()
?renderGvis
?gvisTable
shiny::runApp()
shiny::runApp()
