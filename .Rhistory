testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
View(training)
set.seed(325)
fit<-svm(CompressiveStrength~.,data=training)
fit
pred1<-predict(fit,testing)
pred1
summary(pred1)
con1<-confusionMatrix(pred1,testing$CompressiveStrength)
View(testing)
?rmse
??rmse
postResample(pred1,testing)
postResample(pred1,testing$CompressiveStrength)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
fit<-bats(tstrain)
fcast<-forecast(fit)
fcast #tells you 95 and 85
library("forecast")
library("forecast", lib.loc="~/R/win-library/3.1")
fit<-bats(tstrain)
install.packages("forecast")
install.packages("forecast")
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
fit<-bats(tstrain)
fcast<-forecast(fit)
fcast #tells you 95 and 85
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
fit<-bats(tstrain)
fcast<-forecast(fit)
fcast #tells you 95 and 85
install.packages(timeDate)
install.packages("timeDate")
install.packages("timeDate")
library(forecast)
sessionInfo
sessionInfo()
install.packages(tseries)
install.packages("tseries")
install.packages("tseries")
library("stats", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("tools", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("utils", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("datasets", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("class", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("zoo", lib.loc="~/R/win-library/3.1")
library("timeDate", lib.loc="~/R/win-library/3.1")
library("rstudio", lib.loc="~/R/win-library/3.1")
library("rCharts", lib.loc="~/R/win-library/3.1")
library("randomForest", lib.loc="~/R/win-library/3.1")
library("latticeExtra", lib.loc="~/R/win-library/3.1")
library("lubridate", lib.loc="~/R/win-library/3.1")
library("gbm", lib.loc="~/R/win-library/3.1")
library("gdata", lib.loc="~/R/win-library/3.1")
library("ggplot2", lib.loc="~/R/win-library/3.1")
library("glmnet", lib.loc="~/R/win-library/3.1")
library("gplots", lib.loc="~/R/win-library/3.1")
library("caret", lib.loc="~/R/win-library/3.1")
library("devtools", lib.loc="~/R/win-library/3.1")
library("e1071", lib.loc="~/R/win-library/3.1")
library("elasticnet", lib.loc="~/R/win-library/3.1")
library("ElemStatLearn", lib.loc="~/R/win-library/3.1")
library("forecast", lib.loc="~/R/win-library/3.1")
detach("package:forecast", unload=TRUE)
library("forecast", lib.loc="~/R/win-library/3.1")
detach("package:forecast", unload=TRUE)
remove.packages("forecast", lib="~/R/win-library/3.1")
install.packages("forecast")
library("forecast", lib.loc="~/R/win-library/3.1")
formatDL
formatDL()
install.packages("forecast",dependencies = TRUE)
install.packages("forecast", dependencies = TRUE)
library("forecast", lib.loc="~/R/win-library/3.1")
install.packages("forecast", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library("forecast", lib.loc="~/R/win-library/3.1")
library("Rcpp", lib.loc="~/R/win-library/3.1")
library("forecast", lib.loc="~/R/win-library/3.1")
attach(forecast)
.libPaths()
install.packages(c("caret", "formatR", "labeling", "markdown", "swirl", "xlsxjars"))
library("forecast", lib.loc="~/R/win-library/3.1")
remove.packages("forecast", lib="~/R/win-library/3.1")
install.packages("forecast")
library("forecast", lib.loc="~/R/win-library/3.1")
detach("package:forecast", unload=TRUE)
library("forecast", lib.loc="~/R/win-library/3.1")
library("forecast", lib.loc="~/R/win-library/3.1")
install.packages("base")
install.packages("base")
install.packages("base")
library("base64enc", lib.loc="~/R/win-library/3.1")
library("caret", lib.loc="~/R/win-library/3.1")
library("forecast", lib.loc="~/R/win-library/3.1")
detach("package:timeDate", unload=TRUE)
library("timeDate", lib.loc="~/R/win-library/3.1")
library("tseries", lib.loc="~/R/win-library/3.1")
library("UsingR", lib.loc="~/R/win-library/3.1")
library("TTR", lib.loc="~/R/win-library/3.1")
library("zlibbioc", lib.loc="~/R/win-library/3.1")
library("yaml", lib.loc="~/R/win-library/3.1")
library("xtable", lib.loc="~/R/win-library/3.1")
library("XML", lib.loc="~/R/win-library/3.1")
library("xlsx", lib.loc="~/R/win-library/3.1")
library("xlsxjars", lib.loc="~/R/win-library/3.1")
library("tree", lib.loc="~/R/win-library/3.1")
library("whisker", lib.loc="~/R/win-library/3.1")
library("scrypt", lib.loc="~/R/win-library/3.1")
library("sp", lib.loc="~/R/win-library/3.1")
library("labeling", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
library("jsonlite", lib.loc="~/R/win-library/3.1")
library("jpeg", lib.loc="~/R/win-library/3.1")
library("iterators", lib.loc="~/R/win-library/3.1")
library("httr", lib.loc="~/R/win-library/3.1")
library("glmnet", lib.loc="~/R/win-library/3.1")
library("googleVis", lib.loc="~/R/win-library/3.1")
library("gplots", lib.loc="~/R/win-library/3.1")
library("gsubfn", lib.loc="~/R/win-library/3.1")
library("fpp", lib.loc="~/R/win-library/3.1")
library("fracdiff", lib.loc="~/R/win-library/3.1")
library("gbm", lib.loc="~/R/win-library/3.1")
detach("package:forecast", unload=TRUE)
library("forecast", lib.loc="~/R/win-library/3.1")
detach("package:forecast", unload=TRUE)
library("forecast", lib.loc="~/R/win-library/3.1")
formatDL(nm, txt, indent = max(nchar(nm, "w")) + 3)
library(caret)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
fit<-bats(tstrain)
fcast<-forecast(fit)
fcast #tells you 95 and 85
View(testing)
View(training)
library("forecast", lib.loc="~/R/win-library/3.1")
detach("package:forecast", unload=TRUE)
getwd()
install.packages("forecast")
2.
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit1<-train(diagnosis~.,data=training,method="rf",type="class")
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit1<-train(diagnosis~.,data=training,method="rf",type="class")
set.seed(62433)
fit2<-train(diagnosis~.,data=training,method="gbm")
set.seed(62433)
fit3<-train(diagnosis~.,data=training,method="lda")
set.seed(62433)
pred1<-predict(fit1,newdata=testing)
set.seed(62433)
pred2<-predict(fit2,newdata=testing)
set.seed(62433)
pred3<-predict(fit3,newdata=testing)
#Stacking
set.seed(62433)
predDF<-data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
set.seed(62433)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
set.seed(62433)
combPred <- predict(combModFit,predDF)
set.seed(62433)
confusionMatrix(combPred,testing$diagnosis) #.8171
confusionMatrix(pred1,testing$diagnosis)$overall #.768
confusionMatrix(pred2,testing$diagnosis)$overall #.805
confusionMatrix(pred3,testing$diagnosis)$overall #.768
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit1<-train(diagnosis~.,data=training,method="rf",type="class")
set.seed(62433)
fit2<-train(diagnosis~.,data=training,method="gbm")
set.seed(62433)
fit3<-train(diagnosis~.,data=training,method="lda")
set.seed(62433)
pred1<-predict(fit1,newdata=testing)
set.seed(62433)
pred2<-predict(fit2,newdata=testing)
set.seed(62433)
pred3<-predict(fit3,newdata=testing)
set.seed(62433)
predDF<-data.frame(pred1,pred2,pred3,diagnosis=training$diagnosis)
set.seed(62433)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
shiny::runApp('C:/Users/Michael/SkyDrive/Coursera/GitHub/HealthMap')
showLogs()
??showLogs()
?colSums
?show
?dgamma
?skeleton
?skeleton()
??skeleton
install.packages("skeleton")
library("utils", lib.loc="C:/Program Files/R/R-3.1.1/library")
?skeleton.package
?showMethods
?getMethod
?model.load
??model.load
?model.require
??model.require
install.packages("yhat")
?model.require
??model.require
install.packages("yhatr")
??model.require
??model
library("yhatr", lib.loc="~/R/win-library/3.1")
yhat.config <- c(
username = "your username",
apikey = "your apikey",
env = "http://cloud.yhathq.com/"
)
iris$Sepal.Width_sq <- iris$Sepal.Width^2
fit <- glm(I(Species)=="virginica" ~ ., data=iris)
model.require <- function() {
# require("randomForest")
}
yhat.deploy("irisModel")
yhat.deploy
yhat.verify
?model
?model.require
??model.require
yhat.predict
?predict
detach("package:yhatr", unload=TRUE)
predict
predict()
colSums()
?colSums
?gvisGeoChart
??gvisGeoChart
shiny::runApp('C:/Users/Michael/SkyDrive/Coursera/GitHub/Health2')
setwd("C:/Users/Michael/SkyDrive/Coursera/GitHub/Health2")
library("shinyapps")
shiny::runApp()
deployApp("C:/Users/Michael/SkyDrive/Coursera/GitHub/Health2")
?renderGvis()
renderGvis({
if (input$adjust==1){
data<-YTD7
data[,1]=as.numeric(as.character(data[,1]))
data[,3]=as.numeric(as.character(data[,3]))
data[,4]=as.numeric(as.character(data[,4]))
data[,5]=as.numeric(as.character(data[,5]))
data[,6]=as.numeric(as.character(data[,6]))
data[,7]=as.numeric(as.character(data[,7]))
}
if (input$adjust==2){
data<-HTD3
data[,1]=as.numeric(as.character(data[,1]))
data[,3]=as.numeric(as.character(data[,3]))
data[,4]=as.numeric(as.character(data[,4]))
data[,5]=as.numeric(as.character(data[,5]))
}
gvisTable(data,options=list(width=600))
})
test<-renderGvis({
if (input$adjust==1){
data<-YTD7
data[,1]=as.numeric(as.character(data[,1]))
data[,3]=as.numeric(as.character(data[,3]))
data[,4]=as.numeric(as.character(data[,4]))
data[,5]=as.numeric(as.character(data[,5]))
data[,6]=as.numeric(as.character(data[,6]))
data[,7]=as.numeric(as.character(data[,7]))
}
if (input$adjust==2){
data<-HTD3
data[,1]=as.numeric(as.character(data[,1]))
data[,3]=as.numeric(as.character(data[,3]))
data[,4]=as.numeric(as.character(data[,4]))
data[,5]=as.numeric(as.character(data[,5]))
}
gvisTable(data,options=list(width=600))
})
YTD <- read.csv("1B.csv",stringsAsFactors=FALSE)
YTD <-YTD[-1:-4,]
YTD2<-YTD[,c(1,6:11,13:15)]
YTD2=apply(YTD2, c(1,2), function(x) gsub('\\%', '', x))
YTD2=apply(YTD2, c(1,2), function(x) gsub('\\$', '', x))
YTD2=data.frame(YTD2)
#YTD2[,2:9] <- sapply(YTD2[,2:9], as.numeric)
as.numeric
#Columns selected,
#Row and column names
colnames(YTD2)<-as.character(c("Country/Region","Full Year OP ($$)","YTD OP ($$)","YTD Actuals ($$)","% to OP (%)","Meets OI Requirements", "YTD Incremental over OP ($$)", "% Local Growth OP", "% Local Growth Actual", "LCG % pts. over OP"))
#Filter
YTD2$"sort1" <- as.numeric(sub("\\$","", YTD2$"Full Year OP ($$)"))
YTD3<- subset(YTD2,sort1>=7)
YTD4<-subset(YTD3,YTD3$"Meets OI Requirements"=="YES")
#Cut to YTD columns
YTD5<-YTD4[,c(1:5,7)]
#Make numeric sort column, sort, erase sort column
YTD5$"sort2" <- as.numeric(sub("\\$","", YTD5$"YTD Incremental over OP ($$)"))
YTD6<-YTD5[order(-YTD5$sort2),]
rownames(YTD6)<-c(1:dim(YTD6)[1])
YTD7<-cbind("Rank"=rownames(YTD6),YTD6[,1:6])
#YTD Table ready.
##HTD , starting from YTD4
#Cut to HTD columns
HTD1<-YTD4[,c(1,8:10)]
#Make numeric sort column, sort, erase sort column
HTD1$"sort3" <- as.numeric(sub("\\%","", HTD1$"LCG % pts. over OP"))
HTD2<-HTD1[order(-HTD1$sort3),]
rownames(HTD2)<-c(1:dim(HTD2)[1])
HTD3<-cbind("Rank"=rownames(HTD2),HTD2[,1:4])
#HTD Table ready.
###Fix non-displayed countries
YTD9<-YTD7
HTD4<-HTD3
regions <- function(YTD8) {
#UK Ireland
if (!is.null(which(YTD8[2]=="UK Ireland"))) {
YTD8[,2]<-gsub("UK Ireland", "Great Britain", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Great Britain"),])
YTD8[dim(YTD8)[1],2]<-"Ireland"
}
#Alpine = Swiss, Liechtenstein, Austria.
if (!is.null(which(YTD8[2]=="Alpine"))) {
YTD8[,2]<-gsub("Alpine", "Switzerland", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Switzerland"),])
YTD8[dim(YTD8)[1],2]<-"Liechtenstein"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Switzerland"),])
YTD8[dim(YTD8)[1],2]<-"Austria"
}
#Benelux = Belgium, Luxembourg, Netherlands
if (!is.null(which(YTD8[2]=="Benelux"))) {
YTD8[,2]<-gsub("Benelux", "Netherlands", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Netherlands"),])
YTD8[dim(YTD8)[1],2]<-"Luxembourg"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Netherlands"),])
YTD8[dim(YTD8)[1],2]<-"Belgium"
}
#Gulf = Kuwait, Bahrain, Oman, Qatar, UAE
if (!is.null(which(YTD8[2]=="Gulf"))) {
YTD8[,2]<-gsub("Gulf", "United Arab Emirates", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="United Arab Emirates"),])
YTD8[dim(YTD8)[1],2]<-"Oman"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="United Arab Emirates"),])
YTD8[dim(YTD8)[1],2]<-"Qatar"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="United Arab Emirates"),])
YTD8[dim(YTD8)[1],2]<-"Bahrain"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="United Arab Emirates"),])
YTD8[dim(YTD8)[1],2]<-"Kuwait"
}
#Iberia = Port, spain
if (!is.null(which(YTD8[2]=="Iberia"))) {
YTD8[,2]<-gsub("Iberia", "Spain", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Spain"),])
YTD8[dim(YTD8)[1],2]<-"Portugal"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Spain"),])
YTD8[dim(YTD8)[1],2]<-"Andorra"
}
#Central America & Caribbean Region = DR, Panama, Guatemala, CR, Honduras, Nicaragua, El Salvador
if (!is.null(which(YTD8[2]=="Central America & Caribbean Region"))) {
YTD8[,2]<-gsub("Central America & Caribbean Region", "Dominican Republic", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Panama"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Guatemala"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Costa Rica"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Honduras"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Nicaragua"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"El Salvador"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Jamaica"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Dominican Republic"),])
YTD8[dim(YTD8)[1],2]<-"Trinidad and Tobago"
}
#Andean Region = Ecuador, Peru, Bolivia, Paraguay
if (!is.null(which(YTD8[2]=="Andean Region"))) {
YTD8[,2]<-gsub("Andean Region", "Ecuador", YTD8[,2])
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Ecuador"),])
YTD8[dim(YTD8)[1],2]<-"Peru"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Ecuador"),])
YTD8[dim(YTD8)[1],2]<-"Bolivia"
YTD8<-rbind(YTD8,YTD8[which(YTD8[2]=="Ecuador"),])
YTD8[dim(YTD8)[1],2]<-"Paraguay"
}
#ANZ = NA for now
#Nordic = NA for now
#Argentina Uruguay
#Cesko
#Singapore Region
return(YTD8)
}
YTD9<-regions(YTD9)
HTD4<-regions(HTD4)
###MAP
output$myMap <- renderGvis({
if (input$adjust==1){
data<-cbind(YTD9,"YTD Inc. USD over OP"=as.numeric(sub("\\$", "", YTD9$"YTD Incremental over OP ($$)")))
#color="{values:[0,.5,1,1.5],colors:['#FF0000', '#FFC0CB', '#FFA500','#008000']}"
color="{colors:['#FF0000', '#FFC0CB', '#FFA500','#008000']}"
var="YTD Inc. USD over OP"
}
if (input$adjust==2){
data<-cbind(HTD4,"LCG Perc. over OP"=as.numeric(sub('\\%', '', HTD4$"LCG % pts. over OP")))
#color="{values:[-50,0,10,30],colors:['#FF0000', '#FFC0CB', '#FFA500','#008000']}"
color="{colors:['#FF0000', '#FFC0CB', '#FFA500','#008000']}"
var="LCG Perc. over OP"
}
gvisGeoChart(data, locationvar="Country/Region", colorvar=var, options=list(
colorAxis=color,height=400,width=600,keepAspectRatio='false'))
})
#TABLE
output$myTable <- renderGvis({
if (input$adjust==1){
data<-YTD7
data[,1]=as.numeric(as.character(data[,1]))
data[,3]=as.numeric(as.character(data[,3]))
data[,4]=as.numeric(as.character(data[,4]))
data[,5]=as.numeric(as.character(data[,5]))
data[,6]=as.numeric(as.character(data[,6]))
data[,7]=as.numeric(as.character(data[,7]))
}
if (input$adjust==2){
data<-HTD3
data[,1]=as.numeric(as.character(data[,1]))
data[,3]=as.numeric(as.character(data[,3]))
data[,4]=as.numeric(as.character(data[,4]))
data[,5]=as.numeric(as.character(data[,5]))
}
gvisTable(data,options=list(width=600))
})
})
gvisTable(data,options=list(width=600))
data<-HTD3
data[,1]=as.numeric(as.character(data[,1]))
data[,3]=as.numeric(as.character(data[,3]))
data[,4]=as.numeric(as.character(data[,4]))
data[,5]=as.numeric(as.character(data[,5]))
gvisTable(data,options=list(width=600))
shiny::runApp()
deployApp("C:/Users/Michael/SkyDrive/Coursera/GitHub/Health2")
deployApp("C:/Users/Michael/SkyDrive/Coursera/GitHub/Health2")
setwd("C:/Users/Michael/SkyDrive/Coursera/GitHub/Health2")
library("shinyapps")
deployApp("C:/Users/Michael/SkyDrive/Coursera/GitHub/Health2")
shiny::runApp()
shiny::runApp()
gvisTable(data,options=list(width=600))
test<-gvisTable(data,options=list(width=600))
test
shiny::runApp()
table<-gvisTable(data,options=list(width=600,cssClassNames = "{headerRow: 'myTableHeadrow', tableRow: 'myTablerow', rowNumberCell}", alternatingRowStyle = FALSE))
mytab<-gvisTable(data,options=list(width=600,cssClassNames = "{headerRow: 'myTableHeadrow', tableRow: 'myTablerow', rowNumberCell}", alternatingRowStyle = FALSE))
mytab$html$chart
